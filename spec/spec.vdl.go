// This file was auto-generated by the vanadium vdl tool.
// Source: spec.vdl

// Package spec defines the interfaces between networked participants of the
// triagles display.
//   go get v.io/x/ref/cmd/vdl
//   VDLPATH=$GOPATH/src $GOPATH/bin/vdl --builtin_vdlroot generate github.com/asimshankar/triangles/spec
package spec

import (
	// VDL system imports
	"v.io/v23"
	"v.io/v23/context"
	"v.io/v23/rpc"
	"v.io/v23/vdl"
)

// Triangle represents a triangle that will be displayed on the screen.
//
// The coordinates (X, Y) and velocity (Dx, Dy) are in a world where
// (0, 0) is the center, (1, 1) is the top right and (-1, -1) is the bottom
// left.
//
// R, G, B denote the color of the triangle.
type Triangle struct {
	X  float32
	Y  float32
	Dx float32
	Dy float32
	R  float32
	G  float32
	B  float32
}

func (Triangle) __VDLReflect(struct {
	Name string `vdl:"github.com/asimshankar/triangles/spec.Triangle"`
}) {
}

func init() {
	vdl.Register((*Triangle)(nil))
}

// ScreenClientMethods is the client interface
// containing Screen methods.
//
// Screen represents a remote screen that can be invited to grab triangles.
type ScreenClientMethods interface {
	// Invite is a request to the receiver to join the set of screens that
	// the caller is participating in, by standing to the right of the
	// caller.
	//
	// A Screen can be active on at most one invitation at a time and
	// should return an error if it is engaged in a previous invitation.
	Invite(*context.T, ...rpc.CallOpt) error
	// Give is a request by the caller for the receiver to take ownership
	// of the provided triangle.
	//
	// Give is typically invoked on the receiver by the adjacent screen
	// when a triangle falls off that adjacent screen. However, this is not
	// a requirement and Give can be invoked by an arbitrary client to
	// manufacture a new triangle.
	Give(ctx *context.T, t Triangle, opts ...rpc.CallOpt) error
}

// ScreenClientStub adds universal methods to ScreenClientMethods.
type ScreenClientStub interface {
	ScreenClientMethods
	rpc.UniversalServiceMethods
}

// ScreenClient returns a client stub for Screen.
func ScreenClient(name string) ScreenClientStub {
	return implScreenClientStub{name}
}

type implScreenClientStub struct {
	name string
}

func (c implScreenClientStub) Invite(ctx *context.T, opts ...rpc.CallOpt) (err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "Invite", nil, nil, opts...)
	return
}

func (c implScreenClientStub) Give(ctx *context.T, i0 Triangle, opts ...rpc.CallOpt) (err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "Give", []interface{}{i0}, nil, opts...)
	return
}

// ScreenServerMethods is the interface a server writer
// implements for Screen.
//
// Screen represents a remote screen that can be invited to grab triangles.
type ScreenServerMethods interface {
	// Invite is a request to the receiver to join the set of screens that
	// the caller is participating in, by standing to the right of the
	// caller.
	//
	// A Screen can be active on at most one invitation at a time and
	// should return an error if it is engaged in a previous invitation.
	Invite(*context.T, rpc.ServerCall) error
	// Give is a request by the caller for the receiver to take ownership
	// of the provided triangle.
	//
	// Give is typically invoked on the receiver by the adjacent screen
	// when a triangle falls off that adjacent screen. However, this is not
	// a requirement and Give can be invoked by an arbitrary client to
	// manufacture a new triangle.
	Give(ctx *context.T, call rpc.ServerCall, t Triangle) error
}

// ScreenServerStubMethods is the server interface containing
// Screen methods, as expected by rpc.Server.
// There is no difference between this interface and ScreenServerMethods
// since there are no streaming methods.
type ScreenServerStubMethods ScreenServerMethods

// ScreenServerStub adds universal methods to ScreenServerStubMethods.
type ScreenServerStub interface {
	ScreenServerStubMethods
	// Describe the Screen interfaces.
	Describe__() []rpc.InterfaceDesc
}

// ScreenServer returns a server stub for Screen.
// It converts an implementation of ScreenServerMethods into
// an object that may be used by rpc.Server.
func ScreenServer(impl ScreenServerMethods) ScreenServerStub {
	stub := implScreenServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implScreenServerStub struct {
	impl ScreenServerMethods
	gs   *rpc.GlobState
}

func (s implScreenServerStub) Invite(ctx *context.T, call rpc.ServerCall) error {
	return s.impl.Invite(ctx, call)
}

func (s implScreenServerStub) Give(ctx *context.T, call rpc.ServerCall, i0 Triangle) error {
	return s.impl.Give(ctx, call, i0)
}

func (s implScreenServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implScreenServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{ScreenDesc}
}

// ScreenDesc describes the Screen interface.
var ScreenDesc rpc.InterfaceDesc = descScreen

// descScreen hides the desc to keep godoc clean.
var descScreen = rpc.InterfaceDesc{
	Name:    "Screen",
	PkgPath: "github.com/asimshankar/triangles/spec",
	Doc:     "// Screen represents a remote screen that can be invited to grab triangles.",
	Methods: []rpc.MethodDesc{
		{
			Name: "Invite",
			Doc:  "// Invite is a request to the receiver to join the set of screens that\n// the caller is participating in, by standing to the right of the\n// caller.\n//\n// A Screen can be active on at most one invitation at a time and\n// should return an error if it is engaged in a previous invitation.",
		},
		{
			Name: "Give",
			Doc:  "// Give is a request by the caller for the receiver to take ownership\n// of the provided triangle.\n//\n// Give is typically invoked on the receiver by the adjacent screen\n// when a triangle falls off that adjacent screen. However, this is not\n// a requirement and Give can be invoked by an arbitrary client to\n// manufacture a new triangle.",
			InArgs: []rpc.ArgDesc{
				{"t", ``}, // Triangle
			},
		},
	},
}
